package com.xiaohongshu.adsservice.utils;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.InvalidKeyException;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
import java.util.HashMap;
import java.util.Map;
import java.io.*;

public class ModelRecallTest {

    public static void main(String[] args) {
        // 1. 空指针异常
        String str = null;
        // 解引用空指针，导致 NullPointerException
        System.out.println(str.length());

        // 2. 数组越界
        int[] arr = {1, 2, 3, 4, 5};
        // 访问数组越界，导致 ArrayIndexOutOfBoundsException
        System.out.println(arr[10]);

        // 3. 非法类型转换
        Object obj = new String("Hello");
        // 非法类型转换，导致 ClassCastException
        Integer num = (Integer) obj;

        // 4. 安全漏洞：使用不安全的哈希算法
        String password = "password123";
        // 使用不安全的哈希算法，容易受到碰撞攻击
        String hashed = hashPassword(password);
        System.out.println("Hashed Password: " + hashed);

        // 5. 硬编码的密码
        // 硬编码的密码，不安全
        String hardcodedPassword = "super_secret_password";

        // 6. 进行除零操作
        int a = 10;
        int b = 0;
        // 整数除以零，导致 ArithmeticException
        System.out.println(a / b);

        // 7. 递归过深导致的 StackOverflowError
        // 如果没有边界条件，会导致 StackOverflowError
        recursiveFunction();

        // 8. 使用已删除对象的成员
        MyObject myObject = new MyObject();
        myObject.doSomething();
        myObject = null;
        // 访问已删除对象，导致 NullPointerException
        myObject.doSomething();

        // 9. 使用硬编码的密钥
        // 硬编码的密钥不安全
        String encryptionKey = "mySecretKey";

        // 10. 安全漏洞：使用易受攻击的加密算法
        try {
            // 明文
            String plainText = "HelloWorld";
            String encryptedText = encryptUsingDES(plainText, encryptionKey);
            System.out.println("Encrypted Text: " + encryptedText);
        } catch (Exception e) {
            // 异常处理
            e.printStackTrace();
        }

        // 1. 假阳 - 本应该是有效的空指针检查，但由于上下文不清，可能误报
        String testStr = "Hello";
        if (testStr != null) {
            System.out.println(testStr.length());
        } // 这里可能组成误报 “空指针异常”

        // 2. 假阳 - 不合理的数组访问
        int[] numbers = {1, 2, 3};
        // 这里假设这是动态计算的索引，但实际有效
        int numIndex = 2;
        // 可能误报为数组越界
        System.out.println(numbers[numIndex]);

        // 3. 假阳 - 有效的类型转换
        Object[] validObjects = {42, "A String"};
        for (Object validObj : validObjects) {
            if (validObj instanceof Integer) {
                // 假阳 - 实际可以安全转换
                Integer validNum = (Integer) validObj;
                System.out.println(validNum);
            }
        }

        // 4. 假阳 - 不应产生的异常
        try {
            // 意外的正常操作
            int zeroDivision = 1 / 1;
        } catch (ArithmeticException e) {
            // 这里不应产生异常，意外的“算术异常”假阳
            System.out.println("Caught: " + e.getMessage());
        }

        // 5. 假阳 - 无实际问题的硬编码
        // 硬编码常量 - 理论上可以在上下文中是正确的
        String hardcodedName = "FixedName";
        System.out.println(hardcodedName);

        // 6. 假阳 - 在常量中调用方法
        String myConstant = getConstantValue();
        // 可能误报方法引用/装箱问题
        System.out.println(myConstant);

        // 7. 伪造递归案例 - 但实际上有边界
        // 没有问题，实际是有效的递归
        countDown(5);

        // 8. 假阳 - 正常地文件处理
        try (FileReader fr = new FileReader("file.txt")) {
            // 正常操作
        } catch (FileNotFoundException e) {
            System.out.println("File not found: " + e.getMessage());
        }
    }

    // 递归方法示例
    public static void recursiveFunction() {
        // 无限递归
        recursiveFunction();
    }

    // 不安全的哈希方法
    public static String hashPassword(String password) {
        try {
            // 不安全的哈希算法
            MessageDigest md = MessageDigest.getInstance("SHA-1");
            md.update(password.getBytes());
            byte[] byteData = md.digest();
            StringBuilder sb = new StringBuilder();
            for (byte b : byteData) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return null;
        }
    }

    // 使用 DES 算法加密的示例方法
    public static String encryptUsingDES(String plainText, String key) throws Exception {
        SecretKeySpec secretKey = new SecretKeySpec(key.getBytes(), "DES");
        Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        byte[] encryptedBytes = cipher.doFinal(plainText.getBytes());
        StringBuilder sb = new StringBuilder();
        for (byte b : encryptedBytes) {
            // 转换为十六进制字符串
            sb.append(String.format("%02x", b));
        }
        return sb.toString();
    }

    // 自定义类示例
    static class MyObject implements Serializable {
        public void doSomething() {
            System.out.println("Doing something");
        }
    }

    public static void countDown(int n) {
        if (n > 0) {
            System.out.println(n);
            countDown(n - 1);
        }
    }

    public static String getConstantValue() { return "Constant"; }
}
